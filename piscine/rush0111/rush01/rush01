# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    rush01                                             :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: sabutale <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/06/20 17:06:26 by sabutale          #+#    #+#              #
#    Updated: 2024/06/20 17:06:51 by sabutale         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

/***************************************************/
int numberInColumn(int** board, int number, int column) 
{
    int i;
    i=0;
    while (i < size)
    {
        if (board[i][column] == number)
        {
            return 1;
        }
        i++;
    }
    return 0;
}
/***************************************************/


/***************************************************/

int numbrInRow(int** board, int number, int row)
{
    int i;
    i = 0;
    while ( i < size) {
        if (board[row][i] == number) 
        {
            return 1;
        }
        i++;
    }
    return 0;
}

/***************************************************/


/***************************************************/
int satisfiesClues(int** board)
{
    int i;
    i = 0;
    while ( i < size) 
    {
        // Check top clues
        int max_height = 0, visible_count = 0;
        int j;
        j = 0;
        while ( j < size) 
        {
            if (board[j][i] > max_height) 
            {
                max_height = board[j][i];
                visible_count++;
            }
            j++;
        }
        if (visible_count != top_clues[i] && top_clues[i] != 0) return 0;

        // Check bottom clues
        max_height = 0, visible_count = 0;
        int j;
        j = size - 1;
        while ( j >= 0) 
        {
            if (board[j][i] > max_height) 
            {
                max_height = board[j][i];
                visible_count++;
            }
            j--;
        }
        if (visible_count != bottom_clues[i] && bottom_clues[i] != 0)
        return 0;

        // Check left clues
        max_height = 0, visible_count = 0;
        int j;
        j = 0;
        while ( j < size) 
        {
            if (board[i][j] > max_height) 
            {
                max_height = board[i][j];
                visible_count++;
            }
            j++;
        }
        if (visible_count != left_clues[i] && left_clues[i] != 0) 
        return 0;

        // Check right clues
        max_height = 0, visible_count = 0;
        int j;
        j = size - 1;
        while ( j >= 0) 
        {
            if (board[i][j] > max_height)
            {
                max_height = board[i][j];
                visible_count++;
            }
            j--;
        }
        if (visible_count != right_clues[i] && right_clues[i] != 0) 
        return 0;
        i++;
    }
    return 1;
}

/***************************************************/



/***************************************************/

void printboard(int** board) 
{
    int i;
    i = 0;
    while (i < size)
    {
        int j;
        j = 0;
        while (j < size)
        {
            write (1, &board[i][j], 1);
            write (1, " ", 1);
        }
        write (1, "\n", 1);
    }
}

/***************************************************/


/***************************************************/

int solver(int** board)
{
    int  i;
    i = 0;
    while (i < size)
    {
        int j;
        j = 0;
        while (j < size)
        {
            if (board[i][j] == 0)
            {
                int value;
                value = 1;
                while (value <= size)
                {
                    if (isValidPosition(board, i, j, value)) 
                    {
                        board[i][j] = value;
                        if (solver(board) && satisfiesClues(board))
                        {
                            return 1;
                        }
                        else 
                        board[i][j] = 0;
                    }
                    value++;
                }
                return 0;
            }
            j++;
        }
        i++;
    }
    return 1;
}

/***************************************************/


/***************************************************/
int  isValidPosition(int** board, int row, int column, int number) {
    return (!numberInColumn(board, number, column) && !numbrInRow(board, number, row));
}

/***************************************************/


/***************************************************/
// Function declarations
int numberInColumn(int** board, int number, int column);
int numbrInRow(int** board, int number, int row);
int isValidPosition(int** board, int row, int column, int number);
int satisfiesClues(int** board);
int solver(int** board);
void printboard(int** board);

/***************************************************/
